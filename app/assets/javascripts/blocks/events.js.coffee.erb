# 「イベント」ジャンル

<%
  category = 'events'
  require 'smalruby_editor'
  require 'smalruby_editor/blockly_message_helper'
  color = SmalrubyEditor::COLORS[category.to_sym]
%>

# 実行ボタンがクリックされたとき
<% n = "#{category}_on_start" %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    @setHelpUrl('')
    @setColour(<%= color %>)
    @appendDummyInput()
      .appendField(<%= bm('.on_start') %>)
    @appendStatementInput('DO')
    @setPreviousStatement(true)
    @setNextStatement(true)
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  Blockly.Ruby.characterEvent_(block, 'DO', 'start')

# キーボードの[▼キー]が[▼押された/押され続けている]とき
<% n = "#{category}_on_key_push_or_down" %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    keyDropdown = window.SmalrubyEditor.Sensing.KeyDropdown
    podDropdown = window.SmalrubyEditor.Sensing.PushOrDownDropdown

    @setHelpUrl('')
    @setColour(<%= color %>)
    @interpolateMsg(<%= bm('.on_key_push_or_down') %>,
                    ['KEY', new Blockly.FieldDropdown(keyDropdown)],
                    ['POD', new Blockly.FieldDropdown(podDropdown)],
                    Blockly.ALIGN_RIGHT)
    @appendStatementInput('DO')
    @setPreviousStatement(true)
    @setNextStatement(true)
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  key = @getFieldValue('KEY')
  pod = @getFieldValue('POD')
  Blockly.Ruby.characterEvent_(block, 'DO', "key_#{pod}", key)

# キャラクターがクリックされたとき
<% n = "#{category}_on_click" %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    @setHelpUrl('')
    @setColour(<%= color %>)
    @appendDummyInput()
      .appendField(<%= bm('.on_click') %>)
    @appendStatementInput('DO')
    @setPreviousStatement(true)
    @setNextStatement(true)
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  Blockly.Ruby.characterEvent_(block, 'DO', 'click')

# [▼キャラクター]にぶつかったとき
<% n = "#{category}_on_hit" %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    @setHelpUrl('')
    @setColour(<%= color %>)
    @interpolateMsg(<%= bm('.on_hit') %>,
                    ['CHAR', new Smalruby.FieldCharacter()],
                    Blockly.ALIGN_RIGHT)
    @appendStatementInput('DO')
    @setPreviousStatement(true)
    @setNextStatement(true)
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  char = @getCharacterFieldValue()
  Blockly.Ruby.characterEvent_(block, 'DO', 'hit', char)

# [▼メッセージ]
<% n = "#{category}_messages" %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    messages = [
      [<%= bm('.messages1') %>, 'messages1'],
      [<%= bm('.messages2') %>, 'messages2'],
    ]
    @setHelpUrl('')
    @setColour(<%= color %>)
    @interpolateMsg(<%= bm('.messages') %>,
                    ['NAME', new Blockly.FieldDropdown(messages)],
                    Blockly.ALIGN_RIGHT)
    @setOutput(true, 'String')
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  code = Blockly.Ruby.quote_(@getFieldValue('NAME'))
  [code, Blockly.Ruby.ORDER_ATOMIC]

# [▼メッセージ]を受け取ったとき
<% n = '#{category}_when_i_receive' %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    @setHelpUrl('')
    @setColour(<%= color %>)
    @interpolateMsg(<%= bm('.when_i_receive') %>,
                    ['NAME', ['String'], Blockly.ALIGN_RIGHT],
                    Blockly.ALIGN_RIGHT)
    @appendStatementInput('DO')
    @setPreviousStatement(true)
    @setNextStatement(true)
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  arg = Blockly.Ruby.valueToCode(@, 'NAME', Blockly.Ruby.ORDER_NONE) || ''
  Blockly.Ruby.characterEvent_(block, 'DO', 'receive', arg)

# [▼メッセージ]を送る
<% n = '#{category}_broadcast' %>
Blockly.Blocks['<%= n %>'] =
  init: ()->
    @setHelpUrl('')
    @setColour(<%= color %>)
    @interpolateMsg(<%= bm('.broadcast') %>,
                    ['NAME', ['String'], Blockly.ALIGN_RIGHT],
                    Blockly.ALIGN_RIGHT)
    @setInputsInline(true)
    @setPreviousStatement(true)
    @setNextStatement(true)
    @setTooltip('')

Blockly.Ruby['<%= n %>'] = (block) ->
  arg = Blockly.Ruby.valueToCode(@, 'NAME', Blockly.Ruby.ORDER_NONE) || ''
  Blockly.Ruby.characterMethodCall_('broadcast', arg)